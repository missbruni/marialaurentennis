import type { FC } from 'react';
import { motion } from 'framer-motion';

const paths = [
  // Border first (the rect)
  'M8,8 L574.36,8 L574.36,415.69 L8,415.69 Z',

  // First row - MARIA
  'm 10.9375,0 v -93.378906 h 16.611328 l 29.121094,71.982422 28.984375,-71.982422 H 102.33398 V 0 H 90.712891 V -78.544922 L 59.0625,0 H 54.345703 L 22.558594,-78.544922 V 0 Z',
  'm 138.2336,0 37.66601,-93.378906 h 14.42383 L 227.85274,0 h -13.26172 l -8.27149,-20.849609 H 159.83516 L 151.56367,0 Z m 25.08789,-31.103516 h 39.64843 l -19.89257,-50.380859 z',
  'm 263.82071,0 v -93.378906 h 37.5293 c 8.65885,0 15.72265,2.57487 21.1914,7.724609 5.46875,5.104167 8.20313,11.917318 8.20313,20.439453 0,4.05599 -0.68359,7.770183 -2.05078,11.142578 -1.32162,3.372396 -3.12175,6.175131 -5.40039,8.408204 -2.27865,2.1875 -4.8763,3.942057 -7.79297,5.263671 -2.87109,1.276042 -5.92448,2.050782 -9.16016,2.324219 L 331.56485,0 H 317.82462 L 294.17227,-37.119141 H 275.4418 V 0 Z m 11.62109,-47.304687 h 24.47266 c 5.51432,0 10.02604,-1.663412 13.53516,-4.990235 3.50911,-3.326823 5.26367,-7.633463 5.26367,-12.919922 0,-5.286458 -1.75456,-9.570312 -5.26367,-12.851562 -3.46355,-3.28125 -7.97527,-4.921875 -13.53516,-4.921875 H 275.4418 Z',
  'm 372.86484,0 v -93.378906 h 11.62109 V 0 Z',
  'm 420.38556,0 37.66601,-93.378906 H 472.4754 L 510.0047,0 H 496.74298 L 488.4715,-20.849609 H 441.98712 L 433.71564,0 Z m 25.08789,-31.103516 h 39.64844 l -19.89258,-50.380859 z',

  // Second row - LAUREN
  'M 9.3652344,0 V -93.378906 H 20.986328 v 82.988281 H 64.394531 V 0 Z',
  'm 70.20047,0 37.66602,-93.378906 h 14.42382 L 159.81961,0 h -13.26172 l -8.27148,-20.849609 H 91.802032 L 83.530548,0 Z M 95.288361,-31.103516 H 134.9368 l -19.89258,-50.380859 z',
  'm 168.36749,-36.230469 v -57.148437 h 11.75782 v 56.80664 q 0,13.056641 6.76757,20.507813 6.83594,7.3828124 19.55078,7.3828124 12.71485,0 19.55079,-7.4511714 6.90429,-7.451172 6.90429,-20.439454 v -56.80664 h 11.75782 v 57.011719 q 0,17.841796 -9.7754,27.9589839 -9.77539,10.1171875 -28.4375,10.1171875 -18.52539,0 -28.30078,-10.1171875 -9.77539,-10.1855469 -9.77539,-27.8222659 z',
  'm 266.4632,0 v -93.378906 h 37.52929 q 12.98828,0 21.19141,7.724609 8.20312,7.65625 8.20312,20.439453 0,6.083985 -2.05078,11.142578 -1.98242,5.058594 -5.40039,8.408204 -3.41797,3.28125 -7.79297,5.263671 -4.30664,1.914063 -9.16015,2.324219 L 334.20734,0 H 320.4671 L 296.81476,-37.119141 H 278.08429 V 0 Z m 11.62109,-47.304687 h 24.47266 q 8.27148,0 13.53515,-4.990235 5.26367,-4.990234 5.26367,-12.919922 0,-7.929687 -5.26367,-12.851562 -5.19531,-4.921875 -13.53515,-4.921875 h -24.47266 z',
  'm 351.70734,0 v -93.378906 h 61.18164 v 10.390625 h -49.56055 v 30.078125 h 48.53516 v 10.322265 h -48.53516 v 32.197266 h 49.56055 V 0 Z',
  'm 431.34601,0 v -93.378906 h 11.89453 l 53.73047,72.939453 V -93.378906 H 508.5921 V 0 H 497.38116 L 442.9671,-74.511719 V 0 Z',

  // Third row - TENNIS
  'M 4.5117187,-82.988281 V -93.378906 H 75.332031 v 10.390625 H 45.664062 V 0 H 34.042969 v -82.988281 z',
  'm 99.112892,0 v -93.378906 h 61.181638 v 10.390625 h -49.56054 v 30.078125 h 48.53515 v 10.322265 h -48.53515 v 32.197266 h 49.56054 V 0 Z',
  'm 187.15157,0 v -93.378906 h 11.89453 l 53.73047,72.939453 v -72.939453 h 11.62109 V 0 H 253.18672 L 198.77266,-74.511719 V 0 Z',
  'm 294.60431,0 v -93.378906 h 11.89453 l 53.73047,72.939453 V -93.378906 H 371.8504 V 0 H 360.63947 L 306.2254,-74.511719 V 0 Z',
  'm 402.05704,0 v -93.378906 h 11.62109 V 0 Z',
  'm 438.2793,-13.193359 6.97265,-8.955078 q 5.0586,5.878906 12.50977,9.707031 7.51953,3.7597654 16.74805,3.7597654 5.94726,0 10.39062,-1.5039064 4.51172,-1.503906 6.9043,-3.964844 2.46093,-2.460937 3.55468,-5.126953 1.16211,-2.734375 1.16211,-5.673828 0,-3.828125 -1.91406,-6.699219 -1.8457,-2.939453 -5.05859,-4.716796 -3.21289,-1.845704 -7.38281,-3.212891 -4.10157,-1.435547 -8.68165,-2.666016 -4.58007,-1.230468 -9.22851,-2.529297 -4.58008,-1.298828 -8.75,-3.28125 -4.10156,-1.982421 -7.31445,-4.580078 -3.21289,-2.666015 -5.12696,-6.767578 -1.8457,-4.169922 -1.8457,-9.501953 0,-11.484375 9.0918,-18.730469 9.16015,-7.314453 23.10547,-7.314453 20.50781,0 33.01757,13.19336 l -6.97265,8.544921 q -9.91211,-11.210937 -27.00196,-11.210937 -8.33984,0 -13.80859,4.169922 -5.40039,4.101562 -5.40039,10.664062 0,3.34961 1.8457,5.878907 1.91407,2.529296 5.12696,4.169921 3.21289,1.572266 7.31445,2.871094 4.16992,1.298828 8.75,2.529297 4.64844,1.230469 9.22851,2.666016 4.58008,1.367187 8.68165,3.554687 4.16992,2.119141 7.38281,4.990235 3.21289,2.802734 5.05859,7.177734 1.91406,4.375 1.91406,9.980469 0,5.332031 -1.91406,10.048828 -1.91406,4.716797 -5.81055,8.7499998 -3.89648,3.9648437 -10.80078,6.35742183 -6.83593,2.32421877 -15.92773,2.32421877 -11.55274,0 -20.64453,-3.9648438 -9.02344,-4.0332031 -15.17578,-10.9374996 z'
];

// Transformations for each row
const transformations = [
  'translate(30.9,140.07)', // First row - MARIA
  'translate(32,261)', // Second row - LAUREN
  'translate(36.9,381.98)' // Third row - TENNIS
];

interface AnimatedLogoProps {
  width?: string | number;
}

const AnimatedLogo: FC<AnimatedLogoProps> = ({ width = '100%' }) => {
  return (
    <div className="flex justify-center items-center w-full h-full">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 582.36 423.69"
        className="h-auto"
        style={{ width: typeof width === 'number' ? `${width}px` : width }}
      >
        {/* Border with proper stroke properties */}
        <motion.path
          key="border"
          d={paths[0]}
          fill="none"
          stroke="#fff"
          strokeWidth={16}
          strokeLinecap="square"
          strokeLinejoin="miter"
          initial={{ pathLength: 0, opacity: 0 }}
          animate={{ pathLength: 1, opacity: 1 }}
          transition={{
            pathLength: { duration: 2, ease: 'easeOut' },
            opacity: { duration: 0.3 }
          }}
        />

        {/* First row - MARIA */}
        {paths.slice(1, 6).map((d, index) => (
          <motion.path
            key={`maria-${index}`}
            d={d}
            fill="none"
            stroke="#fff"
            strokeWidth={2}
            transform={transformations[0]}
            initial={{ pathLength: 0, opacity: 0 }}
            animate={{ pathLength: 1, opacity: 1 }}
            transition={{
              pathLength: {
                duration: 2,
                delay: 0.4 + index * 0.15,
                ease: 'easeOut'
              },
              opacity: { duration: 0.3, delay: 0.4 + index * 0.15 }
            }}
          />
        ))}

        {/* Second row - LAUREN */}
        {paths.slice(6, 12).map((d, index) => (
          <motion.path
            key={`lauren-${index}`}
            d={d}
            fill="none"
            stroke="#fff"
            strokeWidth={2}
            transform={transformations[1]}
            initial={{ pathLength: 0, opacity: 0 }}
            animate={{ pathLength: 1, opacity: 1 }}
            transition={{
              pathLength: {
                duration: 2,
                delay: 1 + index * 0.15,
                ease: 'easeOut'
              },
              opacity: { duration: 0.3, delay: 1 + index * 0.15 }
            }}
          />
        ))}

        {/* Third row - TENNIS */}
        {paths.slice(12, 18).map((d, index) => (
          <motion.path
            key={`tennis-${index}`}
            d={d}
            fill="none"
            stroke="#fff"
            strokeWidth={2}
            transform={transformations[2]}
            initial={{ pathLength: 0, opacity: 0 }}
            animate={{ pathLength: 1, opacity: 1 }}
            transition={{
              pathLength: {
                duration: 2,
                delay: 1.6 + index * 0.15,
                ease: 'easeOut'
              },
              opacity: { duration: 0.3, delay: 1.6 + index * 0.15 }
            }}
          />
        ))}
      </svg>
    </div>
  );
};

export default AnimatedLogo;
